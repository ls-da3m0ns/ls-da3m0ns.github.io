var store = [{
        "title": "Ownership and permissions in linux",
        "excerpt":"We all have at some point experienced permission denied error, isn’t it frustrating so let’s understand how permissions in linux work.   Linux like many other operating system is multi-user OS therefore to keep each users data safe and block unauthorized access linux enforces 2 level guard   Ownership Permission   Before we talk about how to get information about files security , to get current info about files security permission you can use ls -al this list all files and directories in current directory with its permissions and ownership details                     Let’s talk about Ownership of a file/directory   There are three types of owners   Owner : these permissions only apply to owner of a file/directory and not other users   Group : each file/directory is assigned a group, these permission affect all users in that group   Others : these are the permissions for all users which are not owner or part of group   Owner denotations   u : user/owner  g : group  o : other  a : all   Changing Ownership and Groups   To change the ownership of a file or a directory use   chown user’s-name filename   To change the group of a file or a directory use   chown group-name filename                     To change both user and group at the same time use   chown user:group filename   Now let’s talk about file/directory permissions   So Permissions are generally represented through the use of the letters r, w and x but they can also be represented numerically.   The table below gives us number for all permission types   Number      Permission Type         Symbol   0           No permission           --- 1           execute                 --x 2           write                   -w- 3           write+execute           -wx 4           read                    r-- 5           read+execute            r-x 6           read+write              rw- 7           read+write+execute      rwx   To change permission of a file/directory you can use   chmod permissions file                     In numeric mode you can change permission for all three types of user at once as each digit represents owner,group,others respectively.   While using symbolic mode you can change permission for specific user by using mathematical symbols   +   To add a permission  -   To remove a permission =   To set new permission and override older ones                     ","categories": ["linux"],
        "tags": [],
        "url": "http://localhost:4000/linux/owenership_and_permission",
        "teaser": "http://localhost:4000/assets/images/default_overlay.png"
      },{
        "title": "Systemd And Services",
        "excerpt":"What is systemd?   Systemd is a new Initialization system and service manager earlier initialization was done using something called SysVinit scripts but nowadays most of the linux distributions except few like Alpine, Gentoo have already shifted to systemd due to its simplicity and backwards compatibility with SysV.   To completely understand initialization system you would have to understand linux boot process   After BIOS completes hardware initialization it transfers control to bootloader.Bootloader then calls the kernel, Kernel loads initial RAM disks and looks for the root file system in system drives, once the kernel is set up it starts systemd initialization. Systemd is the first program called outside kernel space thus it has PID 1, systemd then prepares the userspace and brings OS to operational state by starting all other services.   What is systemctl ?   Systemctl is a tool to manage and control systemd service manager and init system. It helps executing tasks easily which otherwise would take a lot more time as it is easy to manage. Due to its wide adaptation it becomes necessary to get familiar with systemctl.   Managing services   Starting service   To start a service use start command with root previlages   sudo systemctl start servicename.service   You can also use syntax like as systemctl is smart enough to figure it out        Checking status of a service   To get current status of service you can use status command   systemctl status servicename.service   It gives a great overview of service with information like PID, first few line of logs and cgroup hierarchy        Stoping service   To stop a service you can use stop command   sudo systemctl stop servicename.service        Restarting and reloading service   To restart a service you can use restart command   sudo systemctl restart servicename.service   If service has capability to reload its config files then you can use reload command   sudo systemctl reload servicename.service   Enabling and Disabling Services   To automatically start a service while booting you can use enable command. This will create a symlink of unit file of service which systemd reads during initialization.   sudo systemctl enable servicename.service        Similarly to disable a service you can use disable command this will delete the symlink created earlier   sudo systemctl disable servicename.service        ","categories": ["linux"],
        "tags": [],
        "url": "http://localhost:4000/linux/systemd_and_services",
        "teaser": "http://localhost:4000/assets/images/default_overlay.png"
      },{
        "title": "Systemd and Units",
        "excerpt":"What are units?   Units are basically resources that can be managed by systemctl, each unit is defined by unit files which are generally located in  /lib/systemd/system   To know more about systemctl refer to previous article at  Link To Previous Article                      The type of unit is defined by the last part of unit file-name for example services have .service suffix   Note: we are not using sudo during execution of commands that’s because we are just read file info but not making any changes   Systemd will only read or parse units which are necessary, it might not read every unit file in its directory so while listing units it only show files that are loaded into memory   Listing current units   To list all the units that are currently active you can use list-units command   systemctl  list-units    Or   systemctl                      To list all the units regardless of their current state you can use –all flag with it   systemctl list-units --all   To list units of particular type you can use –type= filter for example to list all services unit   systemctl  list-units --type=service                     Listing All unit files   To list all unit files in the current directory of systemd we use list-unit-files command .   systemctl list-unit-files                     The first thing to note here is that it contains a lot less information as compared to list-unit command. The reason is obvious: these are files which might not be loaded by systemd hence it only presents info about unit files.   Displaying unit file of a service   To get more specific information about a particular service we can use cat command to display its unit file   systemctl cat apache2.service                      List dependencies of unit    To list dependencies of a unit you can use list-dependencies command. It will output list of dependencies of unit which must be completed before starting that unit                     Masking of units   In the last article we saw how we can use systemctl enable/disable servicename command to enable or disable a service but systemd has the ability to make a unit completely unstartable by masking it. To mask a service use   sudo systemctl mask apache2.service                     This will make apache unstartable automatically or manually, If you want to again use service you will have to unmask the service first using   sudo systemctl unmask apache2.service   ","categories": ["linux"],
        "tags": [],
        "url": "http://localhost:4000/linux/systemd_and_units",
        "teaser": "http://localhost:4000/assets/images/default_overlay.png"
      },{
        "title": "Deep Learning Approach in detecting Malware (STAMINA)",
        "excerpt":"Intel Labs and Microsoft Threat Protection Intelligence Teams are collaborating to research the application of deep learning for malware threat detection. Intel and Microsoft have previously demonstrated that transfer learning from computer vision for malware analysis can achieve highly desirable classification performance.   The companies call the project STAMINA. The main aim of STAMINA (STAtic Malware-as-image Network Analysis) is to Leverage Deep learning techniques to avoid time-consuming manual feature engineering with high accuracy and low false positives.   Static analysis is a quick and straightforward way to detect malware without executing the application or monitoring the run time behaviour, static analysis technique is used to match malicious signatures.        Preprocessing (image conversion)   An image is obtained from a binary application by assigning a value between 0–255 to every byte, which directly corresponds to pixel intensity. The resulting1-D pixel stream is then converted to 2-D with the help of a table shown below that gives width according to file size, height is obtained by no of pixels divided by width. After reshaping images are resized to 224 or 299 using bilinear interpolation or nearest neighbor algorithms.        Transfer learning Step   Due to limitation of datasets training a complete deep neural network can be difficult therefore transfer learning is used. The idea here is to borrow knowledge learned from a model used in one domain and apply it to another target domain.   A portion of layers are frozen and the last few layers are fine-tuned on a newly obtained dataset.        This approach of malware classification resulted in accuracy upto 99% with 2.6% false positive rating. While this technique is revolutionary it is still in early stages. It’s extremely effective in analyzing small files but with large binaries STAMINA lags . The joint research encourages the use of deep transfer learning for the purpose of malware classification.  ","categories": ["linux"],
        "tags": [],
        "url": "http://localhost:4000/linux/stamina",
        "teaser": "http://localhost:4000/assets/images/default_overlay.png"
      }]
