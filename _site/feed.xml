<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-27T20:06:25+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Beginers.tech</title><subtitle>Stuff that nobody is talking about !</subtitle><author><name>Prashant Singh</name></author><entry><title type="html">Top 0.1% EDA for metro-interstate-traffic-volume</title><link href="http://localhost:4000/linux/ml/traffic_volume_prediction" rel="alternate" type="text/html" title="Top 0.1% EDA for metro-interstate-traffic-volume" /><published>2020-12-18T00:00:00+05:30</published><updated>2020-12-18T00:00:00+05:30</updated><id>http://localhost:4000/linux/ml/traffic_volume_prediction</id><content type="html" xml:base="http://localhost:4000/linux/ml/traffic_volume_prediction">&lt;p&gt;This is my approach to metro-interstate-traffic-volume major feature of this EDA is its Data Cleaning step while Modeling Step was pretty Straight forward and think this is where you guys can 
improve and push the RMSE a bit lower.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f71d45feb9c81ac63b53f813564c279e.js&quot;&gt; &lt;/script&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><category term="ML" /><summary type="html">This is my approach to metro-interstate-traffic-volume major feature of this EDA is its Data Cleaning step while Modeling Step was pretty Straight forward and think this is where you guys can improve and push the RMSE a bit lower.</summary></entry><entry><title type="html">Pytorch Lightning Transfer Learning on custom dataset</title><link href="http://localhost:4000/linux/ml/pytorchlightning" rel="alternate" type="text/html" title="Pytorch Lightning Transfer Learning on custom dataset" /><published>2020-12-04T00:00:00+05:30</published><updated>2020-12-04T00:00:00+05:30</updated><id>http://localhost:4000/linux/ml/pytorchlightning</id><content type="html" xml:base="http://localhost:4000/linux/ml/pytorchlightning">&lt;p&gt;&lt;b&gt;Why use PyTorch Lightning when you already have PyTorch ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Although PyTorch is great but when task becomes complex there’s lots of small mistakes that can happen this is where PyTorch Lightning shines it structures your training and preparation such thatits both extensible for advance users and easy to use for beginners&lt;/p&gt;

&lt;p&gt;For this Blog we will be using Butterfly Dataset which contains images of 50 different classes of butterfly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Imports&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is pretty straight forward and dose not require much explanation&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_8/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Dataset &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;PyTorch Lightning has a clean way of handling data using classes, it has pre-built  hooks which automatically get attached to the required method of the class and also are customizable.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_8/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Few things to note here prepare_data function is called only once during training while function setup is called once for each device in the cluster.&lt;/p&gt;

&lt;p&gt;Lets say you have 8 cores in a TPU then prepare_data would be called once (generally for downloading data ) then setup would be called once for each 8 cores&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Model&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is where most of the PyTorch lightning work is done, PyTorch lightning has preconfigured hooks that allows us train model carefree for example it automatically save checkpoint after each epoch, implements early_stopping if loss metrics is available and automatically setups device for you this allows us to run same code on CPU,GPU and also TPU&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_8/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Here we are using ResNet50 for 50 classes and Adam optimizer with fixed learning rate of 1e-4&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Training&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Training is as simple as calling trainer.fit in PyTorch Lightning&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_8/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><category term="Linux" /><category term="ML" /><summary type="html">Why use PyTorch Lightning when you already have PyTorch ?</summary></entry><entry><title type="html">What are L1,L2 and L3 cache</title><link href="http://localhost:4000/linux/l1l2l3" rel="alternate" type="text/html" title="What are L1,L2 and L3 cache" /><published>2020-12-03T00:00:00+05:30</published><updated>2020-12-03T00:00:00+05:30</updated><id>http://localhost:4000/linux/l1l2l3</id><content type="html" xml:base="http://localhost:4000/linux/l1l2l3">&lt;p&gt;Current generation Computer processors have processing speed of around 3Ghz, and while even high end RAM have speed of 2.4Ghz. As you can see this could be a huge bottle neck for Computers this problem is resolved by using something called CPU cache.&lt;/p&gt;

&lt;p&gt;In Computers mainly there are two type of memory&lt;/p&gt;

&lt;p&gt;&lt;b&gt;DRAM (dynamic ram )&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;These use capacitors and because of that they need to be constantly refreshed using electricity. DRAMs are generally slower than SRAM. A great example of DRAM is RAM.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SRAM (static ram)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;SRAM uses flip flop thus having greater speed and does not need to be refreshed constantly, but SRAM are more expensive than DRAM. They are generally used in CPU cache.&lt;/p&gt;

&lt;p&gt;CPU cache is also called internal memory of CPU, it stores copies of data and instruction from RAM, CPU constantly needs files from RAM CPU cache acts as middle man and stores most frequently requested files by CPU thus increasing efficiency of processor.&lt;/p&gt;

&lt;p&gt;There are three types of CPU cache L1(further split into L1d (data) and L1i (instruction) ) L2 and L3&lt;/p&gt;

&lt;p&gt;In Linux based OS we can use lscpu command to get capacity of each type of cache&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_5/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;L1 cache&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;It is located on the processor and every processor has its own L1 cache. L1 cache is the fastest cache in the computer and runs at the same speed as that of the processor.&lt;/p&gt;

&lt;p&gt;L1 cache is nowadays splitted between L1d (Data) and L1i (instruction)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;L2 cache&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;L2 cache is also known as external cache, as the name suggests it is located outside the processor (core). It stores recent data accessed by CPU which are not stored in L1 cache. If the CPU can’t find data in L1 cache it looks in L2 cache.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;L3 cache&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;L3 cache is also called shared cache as it is shared between all the processors. It stores recent data accessed by CPU which is not available in both L1 or L2 cache . If CPU doesn’t finds data here then it will have to request data from much slower memory RAM&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How cache stores data&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;In every program, there are usually a few instructions that repeat again and again, whereas the rest are executed only once or twice. Those repeating part of code is sent straight to cache, But these codes lines are not consecutive so a “label” is assigned to each cache position, the label is equal to the position of that code line in the ROM. Hence when CPU ask for a code line&lt;/p&gt;

&lt;p&gt;first requested ROM possition is compared with all the labels in the cache. If there is a match (also called cache hit) then associated code line from cache is extracted.&lt;/p&gt;

&lt;p&gt;If there is no match (also called cache miss ) code is extracted from ROM, naturally in this case time taken will be more than usual.&lt;/p&gt;

&lt;p&gt;also a new entry is created in cache for each miss, and to create this space least-recently used cache entry is deleted&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why CPU cache is faster?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Along side each cached line of memory there are extra memory cells that store part(or all ) of the address. therefore all the cells can be queried to see whether they have the particular line of memory that cpu wants and then data will dump it onto bus that connects the main memory to the processor core. this happens in less than a cycle, because it is much simpler&lt;/p&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><category term="Linux" /><summary type="html">Current generation Computer processors have processing speed of around 3Ghz, and while even high end RAM have speed of 2.4Ghz. As you can see this could be a huge bottle neck for Computers this problem is resolved by using something called CPU cache.</summary></entry><entry><title type="html">Use of O_SYNC flag while opening file</title><link href="http://localhost:4000/linux/osync" rel="alternate" type="text/html" title="Use of O_SYNC flag while opening file" /><published>2020-12-03T00:00:00+05:30</published><updated>2020-12-03T00:00:00+05:30</updated><id>http://localhost:4000/linux/osync</id><content type="html" xml:base="http://localhost:4000/linux/osync">&lt;p&gt;Opening a file in Linux is generally done by the help of open( ) system call. The open( ) function establishes the connection between a file and a file descriptor. It will create an open file description that refers to a file and a file descriptor that refers to that open file description. The file descriptor is used by other I/O functions to refer to the file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int open(const char *pathname, int flags, mode_t mode);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function open( ) opens the file specified by pathname. If the specified file does not exist it may optionally be created by providing the&lt;b&gt; O_CREAT&lt;/b&gt; flag in open( ). The argument flags must include one of the following access modes: &lt;b&gt;O_RDONLY&lt;/b&gt;, &lt;b&gt;O_WRONLY&lt;/b&gt;,&lt;b&gt; or O_RDWR &lt;/b&gt;. These requests open the file in read-only, write-only, or read/write modes, respectively.&lt;/p&gt;

&lt;p&gt;In addition, zero or more file creation flags and file status flags can be bitwise-or%u2019d in flags. The file creation flags affect the semantics of the open operation itself while the file status flag affects the semantics of subsequent I/O operations.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Bitwise-or of O_RDONLY and O_SYNC flag:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Synchronized I/O specifies the open() flags O_SYNC,O_DSYNC, and O_RSYNC for controlling the behaviour. Regardless of whether an implementation supports this option, it must at least support the use of O_SYSNC for regular files.&lt;/p&gt;

&lt;p&gt;Linux implements O_SYNC and O_DSYNC, but not O_RSYNC. Somewhat incorrectly, glibc defines O_RSYNC to have the same value as O_SYNC.&lt;/p&gt;

&lt;p&gt;O_SYNC provides synchronized I/O file integrity completion, meaning write operations will flush data and all associated metadata to the underlying hardware.&lt;/p&gt;

&lt;p&gt;O_DSYNC provides synchronized I/O data integrity completion, meaning write operations will flush data to the underlying hardware, but will only flush metadata updates that are required to allow a subsequent read operation to complete successfully.&lt;/p&gt;

&lt;p&gt;Data integrity completion can reduce the number of disk operations that are required for applications that don’t need the guarantees of file integrity completion.&lt;/p&gt;

&lt;p&gt;Since Linux 2.6.33, proper O_SYNC support has been provided. However, to ensure backward binary compatibility, O_DSYNC was defined with the same value as the historical O_SYNC, and O_SYNC was defined as a new (two-bit) flag value that includes the O_DSYNC flag value.&lt;/p&gt;

&lt;p&gt;This ensures that applications compiled against new headers get at least O_DSYNC semantics on pre-2.6.33 kernels.&lt;/p&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><category term="Linux" /><summary type="html">Opening a file in Linux is generally done by the help of open( ) system call. The open( ) function establishes the connection between a file and a file descriptor. It will create an open file description that refers to a file and a file descriptor that refers to that open file description. The file descriptor is used by other I/O functions to refer to the file.</summary></entry><entry><title type="html">Why running ps command without options on shell shows only two entries</title><link href="http://localhost:4000/linux/pscommand" rel="alternate" type="text/html" title="Why running ps command without options on shell shows only two entries" /><published>2020-12-03T00:00:00+05:30</published><updated>2020-12-03T00:00:00+05:30</updated><id>http://localhost:4000/linux/pscommand</id><content type="html" xml:base="http://localhost:4000/linux/pscommand">&lt;p&gt;&lt;b&gt; What is ps command?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;ps also known as “Process status” is a command in linux which provides information about the current running process. ps command accepts several kinds of options like -&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UNIX option : which are always preceded by dash

BSD options : which are not preceded by dash

GNU options : which are preceded by double dash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Why does ps only show 2 items?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;So when you run only “ps” command it only shows the process associated with the current terminal and with the same effective user id (euid) as that of the current user. In most cases it’s only two processes that run with that config but more processes can be created and displayed in ps command output.&lt;/p&gt;

&lt;p&gt;To verify the same we can run a ping command from the current user and terminal then see the output of the “ps”, we will also verify the parent pid of the process.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_7/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;As you can see bash is the parent of both the process and the user is home.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Common ways of using ps command&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;ps can be paired with many arguments but some of them are more used than others those are&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -aux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is perhaps the most widely used configuration of ps command as it lists detailed info of all the process of all the users on a system. Apart from the process associated with the terminal it also lists demons running in the background.&lt;/p&gt;

&lt;p&gt;It can then be piped into other commands for more formatted and specific info like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -aux | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_7/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -elf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an alternative for viewing every process running in a system. It creates a table with 15 column.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_7/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;From where does the “ps” command get all the info?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;ps command does not need any special permission like sudo because it reads the files present in /proc directory. The /proc directory is a special directory as it is the mount point of the proc filesystem which contains virtual files representing each process in the system with their pid as name.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_7/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><summary type="html">What is ps command?</summary></entry><entry><title type="html">Deep Learning Approach in detecting Malware (STAMINA)</title><link href="http://localhost:4000/linux/ml/stamina" rel="alternate" type="text/html" title="Deep Learning Approach in detecting Malware (STAMINA)" /><published>2020-12-03T00:00:00+05:30</published><updated>2020-12-03T00:00:00+05:30</updated><id>http://localhost:4000/linux/ml/stamina</id><content type="html" xml:base="http://localhost:4000/linux/ml/stamina">&lt;p&gt;Intel Labs and Microsoft Threat Protection Intelligence Teams are collaborating to research the application of deep learning for malware threat detection. Intel and Microsoft have previously demonstrated that transfer learning from computer vision for malware analysis can achieve highly desirable classification performance.&lt;/p&gt;

&lt;p&gt;The companies call the project STAMINA. The main aim of STAMINA (STAtic Malware-as-image Network Analysis) is to Leverage Deep learning techniques to avoid time-consuming manual feature engineering with high accuracy and low false positives.&lt;/p&gt;

&lt;p&gt;Static analysis is a quick and straightforward way to detect malware without executing the application or monitoring the run time behaviour, static analysis technique is used to match malicious signatures.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_4/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Preprocessing (image conversion)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;An image is obtained from a binary application by assigning a value between 0–255 to every byte, which directly corresponds to pixel intensity. The resulting1-D pixel stream is then converted to 2-D with the help of a table shown below that gives width according to file size, height is obtained by no of pixels divided by width. After reshaping images are resized to 224 or 299 using bilinear interpolation or nearest neighbor algorithms.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_4/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Transfer learning Step&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Due to limitation of datasets training a complete deep neural network can be difficult therefore transfer learning is used. The idea here is to borrow knowledge learned from a model used in one domain and apply it to another target domain.&lt;/p&gt;

&lt;p&gt;A portion of layers are frozen and the last few layers are fine-tuned on a newly obtained dataset.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_4/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This approach of malware classification resulted in accuracy upto 99% with 2.6% false positive rating. While this technique is revolutionary it is still in early stages. It’s extremely effective in analyzing small files but with large binaries STAMINA lags . The joint research encourages the use of deep transfer learning for the purpose of malware classification.&lt;/p&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><category term="ML" /><summary type="html">Intel Labs and Microsoft Threat Protection Intelligence Teams are collaborating to research the application of deep learning for malware threat detection. Intel and Microsoft have previously demonstrated that transfer learning from computer vision for malware analysis can achieve highly desirable classification performance.</summary></entry><entry><title type="html">Ownership and permissions in linux</title><link href="http://localhost:4000/linux/owenership_and_permission" rel="alternate" type="text/html" title="Ownership and permissions in linux" /><published>2020-12-02T00:00:00+05:30</published><updated>2020-12-02T00:00:00+05:30</updated><id>http://localhost:4000/linux/owenership_and_permission</id><content type="html" xml:base="http://localhost:4000/linux/owenership_and_permission">&lt;p&gt;We all have at some point experienced permission denied error, isn’t it frustrating so let’s understand how permissions in linux work.&lt;/p&gt;

&lt;p&gt;Linux like many other operating system is multi-user OS therefore to keep each users data safe and block unauthorized access linux enforces 2 level guard&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ownership
Permission
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we talk about how to get information about files security , to get current info about files security permission you can use ls -al this list all files and directories in current directory with its permissions and ownership details&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_1/image1.png&quot; alt=&quot;ls command demo &quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s talk about Ownership of a file/directory&lt;/p&gt;

&lt;p&gt;There are three types of owners&lt;/p&gt;

&lt;p&gt;Owner : these permissions only apply to owner of a file/directory and not other users&lt;/p&gt;

&lt;p&gt;Group : each file/directory is assigned a group, these permission affect all users in that group&lt;/p&gt;

&lt;p&gt;Others : these are the permissions for all users which are not owner or part of group&lt;/p&gt;

&lt;p&gt;Owner denotations&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;u : user/owner

g : group

o : other

a : all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Changing Ownership and Groups&lt;/p&gt;

&lt;p&gt;To change the ownership of a file or a directory use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chown user’s-name filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To change the group of a file or a directory use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chown group-name filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_1/image2.png&quot; alt=&quot;ls command demo &quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;To change both user and group at the same time use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chown user:group filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s talk about file/directory permissions&lt;/p&gt;

&lt;p&gt;So Permissions are generally represented through the use of the letters r, w and x but they can also be represented numerically.&lt;/p&gt;

&lt;p&gt;The table below gives us number for all permission types&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number      Permission Type         Symbol 

0           No permission           ---
1           execute                 --x
2           write                   -w-
3           write+execute           -wx
4           read                    r--
5           read+execute            r-x
6           read+write              rw-
7           read+write+execute      rwx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To change permission of a file/directory you can use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod permissions file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_1/image3.png&quot; alt=&quot;ls command demo &quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In numeric mode you can change permission for all three types of user at once as each digit represents owner,group,others respectively.&lt;/p&gt;

&lt;p&gt;While using symbolic mode you can change permission for specific user by using mathematical symbols&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+   To add a permission 
-   To remove a permission
=   To set new permission and override older ones
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_1/image4.png&quot; alt=&quot;ls command demo &quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><summary type="html">We all have at some point experienced permission denied error, isn’t it frustrating so let’s understand how permissions in linux work.</summary></entry><entry><title type="html">Systemd And Services</title><link href="http://localhost:4000/linux/systemd_and_services" rel="alternate" type="text/html" title="Systemd And Services" /><published>2020-12-02T00:00:00+05:30</published><updated>2020-12-02T00:00:00+05:30</updated><id>http://localhost:4000/linux/systemd_and_services</id><content type="html" xml:base="http://localhost:4000/linux/systemd_and_services">&lt;p&gt;What is systemd?&lt;/p&gt;

&lt;p&gt;Systemd is a new Initialization system and service manager earlier initialization was done using something called SysVinit scripts but nowadays most of the linux distributions except few like Alpine, Gentoo have already shifted to systemd due to its simplicity and backwards compatibility with SysV.&lt;/p&gt;

&lt;p&gt;To completely understand initialization system you would have to understand linux boot process&lt;/p&gt;

&lt;p&gt;After BIOS completes hardware initialization it transfers control to bootloader.Bootloader then calls the kernel, Kernel loads initial RAM disks and looks for the root file system in system drives, once the kernel is set up it starts systemd initialization. Systemd is the first program called outside kernel space thus it has PID 1, systemd then prepares the userspace and brings OS to operational state by starting all other services.&lt;/p&gt;

&lt;p&gt;What is systemctl ?&lt;/p&gt;

&lt;p&gt;Systemctl is a tool to manage and control systemd service manager and init system. It helps executing tasks easily which otherwise would take a lot more time as it is easy to manage. Due to its wide adaptation it becomes necessary to get familiar with systemctl.&lt;/p&gt;

&lt;p&gt;Managing services&lt;/p&gt;

&lt;p&gt;Starting service&lt;/p&gt;

&lt;p&gt;To start a service use start command with root previlages&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use syntax like as systemctl is smart enough to figure it out&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_2/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Checking status of a service&lt;/p&gt;

&lt;p&gt;To get current status of service you can use status command&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It gives a great overview of service with information like PID, first few line of logs and cgroup hierarchy&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_2/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Stoping service&lt;/p&gt;

&lt;p&gt;To stop a service you can use stop command&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl stop servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_2/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Restarting and reloading service&lt;/p&gt;

&lt;p&gt;To restart a service you can use restart command&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl restart servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If service has capability to reload its config files then you can use reload command&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl reload servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enabling and Disabling Services&lt;/p&gt;

&lt;p&gt;To automatically start a service while booting you can use enable command. This will create a symlink of unit file of service which systemd reads during initialization.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_2/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Similarly to disable a service you can use disable command this will delete the symlink created earlier&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl disable servicename.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_2/image5.png&quot; alt=&quot;&quot; /&gt;&lt;/figure&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><summary type="html">What is systemd?</summary></entry><entry><title type="html">Systemd and Units</title><link href="http://localhost:4000/linux/systemd_and_units" rel="alternate" type="text/html" title="Systemd and Units" /><published>2020-12-02T00:00:00+05:30</published><updated>2020-12-02T00:00:00+05:30</updated><id>http://localhost:4000/linux/systemd_and_units</id><content type="html" xml:base="http://localhost:4000/linux/systemd_and_units">&lt;p&gt;What are units?&lt;/p&gt;

&lt;p&gt;Units are basically resources that can be managed by systemctl, each unit is defined by unit files which are generally located in  &lt;b&gt;/lib/systemd/system&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;To know more about systemctl refer to previous article at &lt;mark&gt;&lt;a href=&quot;https://medium.com/@backbencherspot/systemd-and-services-70db064e177d?source=friends_link&amp;amp;sk=5dcffa22d36815d0596f4e14553f5c08&quot;&gt; Link To Previous Article &lt;/a&gt;&lt;/mark&gt;&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image1.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The type of unit is defined by the last part of unit file-name for example services have .service suffix&lt;/p&gt;

&lt;p&gt;Note: we are not using sudo during execution of commands that’s because we are just read file info but not making any changes&lt;/p&gt;

&lt;p&gt;Systemd will only read or parse units which are necessary, it might not read every unit file in its directory so while listing units it only show files that are loaded into memory&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Listing current units&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;To list all the units that are currently active you can use list-units command&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl  list-units 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image2.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;To list all the units regardless of their current state you can use –all flag with it&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl list-units --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To list units of particular type you can use –type= filter for example to list all services unit&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl  list-units --type=service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image3.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Listing All unit files&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;To list all unit files in the current directory of systemd we use list-unit-files command .&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl list-unit-files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image4.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The first thing to note here is that it contains a lot less information as compared to list-unit command. The reason is obvious: these are files which might not be loaded by systemd hence it only presents info about unit files.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Displaying unit file of a service&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;To get more specific information about a particular service we can use cat command to display its unit file&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl cat apache2.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image5.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;List dependencies of unit &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;To list dependencies of a unit you can use list-dependencies command. It will output list of dependencies of unit which must be completed before starting that unit&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image6.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Masking of units&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;In the last article we saw how we can use systemctl enable/disable servicename command to enable or disable a service but systemd has the ability to make a unit completely unstartable by masking it. To mask a service use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl mask apache2.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/blog_3/image7.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This will make apache unstartable automatically or manually, If you want to again use service you will have to unmask the service first using&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl unmask apache2.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Prashant Singh</name></author><category term="linux" /><summary type="html">What are units?</summary></entry></feed>